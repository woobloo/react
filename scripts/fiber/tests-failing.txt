src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js
* renders simple numbers with client render on top of good server markup
* renders simple numbers with client render on top of bad server markup
* renders simple strings with client render on top of good server markup
* renders simple strings with client render on top of bad server markup
* renders string prop with true value with client render on top of good server markup
* renders string prop with false value with client render on top of good server markup
* renders boolean prop with true value with client render on top of good server markup
* renders boolean prop with true value with client render on top of bad server markup
* renders boolean prop with false value with client render on top of good server markup
* renders boolean prop with false value with client render on top of bad server markup
* renders boolean prop with self value with client render on top of good server markup
* renders boolean prop with self value with client render on top of bad server markup
* renders boolean prop with "" value with client render on top of good server markup
* renders boolean prop with "" value with client render on top of bad server markup
* renders boolean prop with string value with client render on top of good server markup
* renders boolean prop with string value with client render on top of bad server markup
* renders boolean prop with array value with client render on top of good server markup
* renders boolean prop with array value with client render on top of bad server markup
* renders boolean prop with object value with client render on top of good server markup
* renders boolean prop with object value with client render on top of bad server markup
* renders boolean prop with non-zero number value with client render on top of good server markup
* renders boolean prop with non-zero number value with client render on top of bad server markup
* renders boolean prop with zero value with client render on top of good server markup
* renders boolean prop with zero value with client render on top of bad server markup
* renders download prop with true value with client render on top of good server markup
* renders download prop with false value with client render on top of good server markup
* renders download prop with string value with client render on top of good server markup
* renders download prop with string "true" value with client render on top of good server markup
* renders className prop with string value with client render on top of good server markup
* renders className prop with string value with client render on top of bad server markup
* renders className prop with empty string value with client render on top of good server markup
* renders className prop with empty string value with client render on top of bad server markup
* renders className prop with true value with client render on top of good server markup
* renders className prop with true value with client render on top of bad server markup
* renders className prop with false value with client render on top of good server markup
* renders className prop with false value with client render on top of bad server markup
* renders htmlFor with string value with client render on top of good server markup
* renders htmlFor with string value with client render on top of bad server markup
* renders htmlFor with an empty string with client render on top of good server markup
* renders htmlFor with an empty string with client render on top of bad server markup
* renders className prop with true value with client render on top of good server markup
* renders className prop with true value with client render on top of bad server markup
* renders className prop with false value with client render on top of good server markup
* renders className prop with false value with client render on top of bad server markup
* renders unknown attributes with client render on top of good server markup
* renders unknown attributes with client render on top of bad server markup
* renders unknown data- attributes with client render on top of good server markup
* renders unknown data- attributes with client render on top of bad server markup
* renders no unknown attributes for non-standard elements with client render on top of good server markup
* renders svg element with an xlink with client render on top of good server markup
* renders a div with a child with client render on top of good server markup
* renders a div with a child with client render on top of bad server markup
* renders a div with multiple children with client render on top of good server markup
* renders a div with multiple children with client render on top of bad server markup
* renders a div with multiple children separated by whitespace with client render on top of good server markup
* renders a div with multiple children separated by whitespace with client render on top of bad server markup
* renders a div with a single child surrounded by whitespace with client render on top of good server markup
* renders a div with a single child surrounded by whitespace with client render on top of bad server markup
* renders an input with a value and readOnly with client render on top of good server markup
* renders an input with a defaultValue with client render on top of good server markup
* renders an input value overriding defaultValue with client render on top of good server markup
* renders an input value overriding defaultValue no matter the prop order with client render on top of good server markup
* renders a checkbox that is checked with an onChange with client render on top of good server markup
* renders a checkbox that is checked with readOnly with client render on top of good server markup
* renders a checkbox that is checked and no onChange/readOnly with client render on top of good server markup
* renders a checkbox with defaultChecked with client render on top of good server markup
* renders a checkbox checked overriding defaultChecked with client render on top of good server markup
* renders a checkbox checked overriding defaultChecked no matter the prop order with client render on top of good server markup
* renders a textarea with a value and readOnly with client render on top of good server markup
* renders a textarea with a defaultValue with client render on top of good server markup
* renders a textarea value overriding defaultValue with client render on top of good server markup
* renders a textarea value overriding defaultValue no matter the prop order with client render on top of good server markup
* renders a select with a value and an onChange with client render on top of good server markup
* renders a select with a value and readOnly with client render on top of good server markup
* renders a select with a multiple values and an onChange with client render on top of good server markup
* renders a select with a multiple values and readOnly with client render on top of good server markup
* renders a select with a value and no onChange/readOnly with client render on top of good server markup
* renders a select with a defaultValue with client render on top of good server markup
* renders a select value overriding defaultValue with client render on top of good server markup
* renders a select value overriding defaultValue no matter the prop order with client render on top of good server markup
* renders a controlled checkbox with client render on top of good server markup
* should not blow away user-entered text on successful reconnect to an uncontrolled input
* should not blow away user-entered text on successful reconnect to an uncontrolled checkbox
* should not blow away user-entered text on successful reconnect to a controlled checkbox
* should not blow away user-selected value on successful reconnect to an uncontrolled select
* renders class child with wrong context with client render on top of good server markup
* renders class child with wrong context with client render on top of bad server markup
* renders stateless child with wrong context with client render on top of good server markup
* renders stateless child with wrong context with client render on top of bad server markup
* renders a child context merged with a parent context with client render on top of good server markup
* should reconnect ES6 Class to ES6 Class
* should reconnect Pure Component to ES6 Class
* should reconnect Bare Element to ES6 Class
* should reconnect ES6 Class to Pure Component
* should reconnect Pure Component to Pure Component
* should reconnect Bare Element to Pure Component
* should reconnect ES6 Class to Bare Element
* should reconnect Pure Component to Bare Element
* should reconnect Bare Element to Bare Element
* should error reconnecting added attributes
* should error reconnecting different attribute values
* should error reconnecting a div with children separated by whitespace on the client
* should error reconnecting a div with children separated by different whitespace on the server
* should error reconnecting a div with children separated by different whitespace
